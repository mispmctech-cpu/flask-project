-- =====================================================
-- SIMPLE ADMIN SETUP - WORKS WITH EXISTING FORMSTATUS
-- =====================================================
-- This works with whatever columns your FormStatus table already has

-- =====================================================
-- 1. CHECK EXISTING STRUCTURE
-- =====================================================
SELECT 'CHECKING EXISTING TABLES...' as status;

-- Show existing FormStatus table structure
SELECT 'FORMSTATUS COLUMNS:' as info;
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_schema = 'public' AND table_name = 'FormStatus'
ORDER BY ordinal_position;

-- Show existing data in FormStatus
SELECT 'EXISTING FORMSTATUS DATA:' as info;
SELECT * FROM public."FormStatus" LIMIT 5;

-- =====================================================
-- 2. CREATE NECESSARY ADMIN TABLES
-- =====================================================

-- FormStatusLog for tracking changes
CREATE TABLE IF NOT EXISTS public."FormStatusLog" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  form_id bigint NULL,
  form_name text NOT NULL,
  old_status boolean NULL,
  new_status boolean NOT NULL,
  changed_by bigint NULL,
  changed_at timestamp DEFAULT CURRENT_TIMESTAMP,
  reason text NULL,
  CONSTRAINT FormStatusLog_pkey PRIMARY KEY (id)
);

-- Notifications table
CREATE TABLE IF NOT EXISTS public."Notifications" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  type text DEFAULT 'info',
  priority text DEFAULT 'normal',
  target_role text NULL,
  is_active boolean DEFAULT true,
  created_by bigint NULL,
  created_at timestamp DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT Notifications_pkey PRIMARY KEY (id)
);

-- System Settings
CREATE TABLE IF NOT EXISTS public."SystemSettings" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  setting_key text NOT NULL UNIQUE,
  setting_value text NULL,
  description text NULL,
  CONSTRAINT SystemSettings_pkey PRIMARY KEY (id)
);

-- =====================================================
-- 3. ADD ADMIN DATA
-- =====================================================

-- Add notifications
INSERT INTO public."Notifications" (title, message, type, priority, target_role, is_active) VALUES
('Admin Dashboard Ready', 'The admin dashboard is now fully operational', 'success', 'normal', 'admin', true),
('Forms Management Active', 'You can now manage all forms through the admin panel', 'info', 'normal', 'admin', true),
('Welcome Message', 'Welcome to PMC Tech Admin System', 'info', 'low', 'all', true)
ON CONFLICT DO NOTHING;

-- Add system settings
INSERT INTO public."SystemSettings" (setting_key, setting_value, description) VALUES
('system_name', 'PMC Tech Admin System', 'System display name'),
('academic_year', '2024-25', 'Current academic year'),
('maintenance_mode', 'false', 'System maintenance status')
ON CONFLICT (setting_key) DO UPDATE SET setting_value = EXCLUDED.setting_value;

-- Add sample activity logs
INSERT INTO public."FormStatusLog" (form_name, old_status, new_status, changed_by, reason) VALUES
('Faculty Form 1', true, false, 1, 'Temporarily disabled for maintenance'),
('Institution Form 1', false, true, 1, 'Re-enabled after updates'),
('Faculty Form 3', true, true, 1, 'Status confirmed active')
ON CONFLICT DO NOTHING;

-- =====================================================
-- 4. VERIFY ADMIN DASHBOARD SETUP
-- =====================================================
SELECT 'ADMIN SETUP VERIFICATION:' as status;

-- Count all users for dashboard stats
SELECT 'USER COUNTS:' as info;
SELECT 'Faculty' as user_type, COUNT(*) as count FROM public."Faculty"
UNION ALL
SELECT 'HOD', COUNT(*) FROM public."HOD"
UNION ALL
SELECT 'Principal', COUNT(*) FROM public."Principal"
UNION ALL
SELECT 'IQAC', COUNT(*) FROM public."IQAC"
UNION ALL
SELECT 'Management', COUNT(*) FROM public."Management"
UNION ALL
SELECT 'Admin', COUNT(*) FROM public."Admin";

-- Count forms for dashboard stats
SELECT 'FORM STATS:' as info;
SELECT COUNT(*) as total_forms FROM public."FormStatus";
SELECT COUNT(*) as open_forms FROM public."FormStatus" WHERE is_open = true;
SELECT COUNT(*) as closed_forms FROM public."FormStatus" WHERE is_open = false;

-- Count notifications
SELECT 'NOTIFICATION STATS:' as info;
SELECT COUNT(*) as active_notifications FROM public."Notifications" WHERE is_active = true;

-- Count departments (from faculty data)
SELECT 'DEPARTMENT COUNT:' as info;
SELECT COUNT(DISTINCT department) as unique_departments 
FROM public."Faculty" 
WHERE department IS NOT NULL AND department != '';

-- Show sample FormStatus data
SELECT 'SAMPLE FORMSTATUS DATA:' as info;
SELECT * FROM public."FormStatus" ORDER BY id LIMIT 10;

-- =====================================================
-- 5. ADMIN DASHBOARD READY!
-- =====================================================
SELECT 'âœ… ADMIN DASHBOARD IS NOW FUNCTIONAL!' as final_status;
SELECT 'Your admin can now:' as capabilities;
SELECT '- View user statistics' as capability_1;
SELECT '- Manage form status (if FormStatus has is_open column)' as capability_2;
SELECT '- Send notifications' as capability_3;
SELECT '- Monitor system activity' as capability_4;
SELECT '- View department statistics' as capability_5;
